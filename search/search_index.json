{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Caracal is a stateless ICMP/UDP IPv4/v6 Paris traceroute and ping engine written in modern C++. It runs on BSD, Linux and macOS, on x86-64 and ARM64 systems.</p> <p>Caracal reads probe specifications, sends the corresponding probe packets at the specified rate, parse the eventual replies and outputs them in CSV format.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Constant flow-id: Caracal doesn't vary the flow identifier for two probes with the same specification, making it suitable to discover load-balanced paths on the Internet.</li> <li>Fast: Caracal uses the standard socket API, yet on a 2020 M1 MacBook Air it can send 1.3M packets per second. See profiling for a discussion of possible performance improvements.</li> <li>Stateless: classical probing tools such as traceroute needs to remember which probes they have sent, in order to match the replies (e.g. to know the TTL of the probe). Caracal takes inspiration from yarrp and encodes the probe information in the section of the probe packet that is included back in ICMP messages. Thus, it doesn't need to remember each probe sent, allowing it to send millions of probes per second with a minimal memory footprint.</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#docker","title":"Docker","text":"<p>The easiest way to run Caracal is through Docker: <pre><code>docker run ghcr.io/dioptra-io/caracal --help\n</code></pre></p> <p>On macOS, please use colima instead of Docker for Mac which mangles the IP header.</p>"},{"location":"#nix","title":"Nix","text":"<p>If you're using the Nix package manager, you can use the following command: <pre><code>nix run github:dioptra-io/caracal -- --help\n</code></pre></p>"},{"location":"dev/","title":"Development","text":""},{"location":"dev/#prerequisites","title":"Prerequisites","text":"<p>Caracal targets x86-64/ARM64 Linux/macOS systems.</p> <p>In all the sections below, we assume that you have downloaded a copy of the repository: <pre><code>git clone https://github.com/dioptra-io/caracal.git\ncd caracal\n</code></pre></p>"},{"location":"dev/#build-tools","title":"Build tools","text":"<p>To build this project, CMake, Conan, and a compiler implementing C++20 are required. Optionally, Gcovr can be used to compute the test coverage.</p> <pre><code># macOS\nbrew install cmake conan gcovr\n\n# Ubuntu 20.04+\napt install build-essential cmake gcovr git pipx\npipx install conan\n</code></pre>"},{"location":"dev/#external-dependencies","title":"External dependencies","text":"<p>All the runtime dependencies are statically linked: they are either fetched with Conan if available, or built from the sources in <code>/extern</code>. The only exceptions are libc and libstdc++ which are dynamically linked.</p>"},{"location":"dev/#building-from-source","title":"Building from source","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake -DCMAKE_BUILD_TYPE=Debug -DWITH_BINARY=ON -DWITH_CONAN=ON ..\ncmake --build .\n</code></pre>"},{"location":"dev/#options","title":"Options","text":"Option Default Description <code>CMAKE_BUILD_TYPE</code> <code>Debug</code> Set to <code>Release</code> for a production build. <code>WITH_CONAN</code> <code>OFF</code> Whether to run <code>conan install</code> on configure or not. <code>WITH_BINARY</code> <code>OFF</code> Whether to enable the <code>caracal-bin</code> target or not. <code>WITH_TESTS</code> <code>OFF</code> Whether to enable the <code>caracal-test</code> target or not. <p>Use <code>-DOPTION=Value</code> to set an option. For example: <code>cmake -DCMAKE_BUILD_TYPE=Release ..</code></p>"},{"location":"dev/#targets","title":"Targets","text":"Target Output Description <code>caracal-bin</code> <code>caracal</code> Prober <code>caracal-test</code> <code>caracal-test</code> Unit and performance tests <p>To build a specific target, use <code>cmake --build . --target TARGET</code>.</p>"},{"location":"dev/#docker-image","title":"Docker image","text":"<p>To build the Docker image, simply run: <pre><code>docker build -t caracal .\n</code></pre></p>"},{"location":"dev/#profiling","title":"Profiling","text":"<p>Caracal is easily profiled using perf on Linux. Currently, the main bottleneck is the socket, as demonstrated below.</p> <pre><code># Generate 1M probes towards TEST-NET-1\nyes \"192.0.2.1,24000,33434,32,icmp\" | head -n 1000000 &gt; probes.txt\nsudo perf record -g ./caracal --rate-limiting-method=none -i probes.txt\nsudo perf report\n# +   68.09%    12.33%  caracal  libpthread-2.31.so   [.] __libc_sendto\n# +   56.63%     0.00%  caracal  [kernel.kallsyms]    [k] entry_SYSCALL_64_after_hwframe\n# +   56.24%     4.51%  caracal  [kernel.kallsyms]    [k] do_syscall_64\n# +   51.10%     0.38%  caracal  [kernel.kallsyms]    [k] __x64_sys_sendto\n# +   50.49%     0.52%  caracal  [kernel.kallsyms]    [k] __sys_sendto\n# +   47.37%     0.18%  caracal  [kernel.kallsyms]    [k] sock_sendmsg\n# +   46.13%     0.39%  caracal  [kernel.kallsyms]    [k] packet_sendmsg\n# +   45.36%     1.16%  caracal  [kernel.kallsyms]    [k] packet_snd\n# +   30.83%     0.34%  caracal  [kernel.kallsyms]    [k] dev_queue_xmit\n# +   30.22%     1.19%  caracal  [kernel.kallsyms]    [k] __dev_queue_xmit\n# +   23.42%     0.27%  caracal  [kernel.kallsyms]    [k] sch_direct_xmit\n# +   15.59%     0.49%  caracal  [kernel.kallsyms]    [k] dev_hard_start_xmit\n# ...\n</code></pre> <p>A version using <code>TX_RING</code> on Linux is available in the <code>ring_socket_v2</code> branch, but it doesn't show any noticeable performance improvement. To increase the probing rate, we would potentially need to resort to a zero-copy solution such as PF_RING ZC.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#example","title":"Example","text":"<p>Probe Google DNS servers at TTL 32: probes.txt<pre><code>8.8.8.8,24000,33434,32,icmp\n8.8.4.4,24000,33434,32,icmp\n2001:4860:4860::8888,24000,33434,32,icmp\n2001:4860:4860::8844,24000,33434,32,icmp\n</code></pre> <pre><code>cat probes.txt | caracal &gt; replies.csv\n</code></pre></p>"},{"location":"usage/#input-format","title":"Input format","text":"<p>Caracal reads probe specifications from the standard input or.</p> <p>The input format is: <pre><code>dst_addr,src_port,dst_port,ttl,protocol\n</code></pre></p> <ul> <li><code>dst_addr</code> can be an IPv4 address in dotted notation (e.g. <code>8.8.8.8</code>), an IPv4-mapped IPv6 address (e.g. <code>::ffff:8.8.8.8</code>)   or an IPv6 address (e.g. <code>2001:4860:4860::8888</code>).</li> <li><code>src_port</code> and <code>dst_port</code> are integer values between 0 and 65535. For UDP probes, the ports are encoded directly in the UDP header. For ICMP probes, the source port is encoded in the ICMP checksum (which varies the flow-id).</li> <li><code>protocol</code> can be <code>icmp</code>, <code>icmp6</code> or <code>udp</code>.</li> </ul>"},{"location":"usage/#output-format","title":"Output format","text":"<p>Caracal outputs the replies in CSV format on the standard output. Log messages are printed on the standard error stream.</p> <p>The output format is: <pre><code>capture_timestamp,probe_protocol,probe_src_addr,probe_dst_addr,probe_src_port,probe_dst_port,probe_ttl,quoted_ttl,reply_src_addr,reply_protocol,reply_icmp_type,reply_icmp_code,reply_ttl,reply_size,reply_mpls_labels,rtt,round\n</code></pre></p> <ul> <li><code>capture_timestamp</code> is a 64-bit integer representing the capture time in microseconds.</li> <li><code>probe_protocol</code> is an 8-bit integer representing the IP protocol number of the probe packet.</li> <li><code>probe_src_addr</code> is an IPv6 string representing the source address of the probe packet.</li> <li><code>probe_dst_addr</code> is an IPv6 string representing the destination address of the probe packet.</li> <li><code>probe_src_port</code> is a 16-bit integer representing the source port of the probe packet (for UDP), or the ICMP checksum (for ICMP).</li> <li><code>probe_dst_port</code> is a 16-bit integer representing the destination port of the probe packet (for UDP).</li> <li><code>probe_ttl</code> is an 8-bit integer representing the TTL of the probe packet.</li> <li><code>quoted_ttl</code> is an 8-bit integer representing the TTL of the probe packet quoted in the ICMP reply.</li> <li><code>reply_src_addr</code> is an IPv6 string representing the source address of the reply packet.</li> <li><code>reply_protocol</code> is an 8-bit integer representing the IP protocol number of the reply packet.</li> <li><code>reply_icmp_type</code> is an 8-bit integer representing the ICMP type of the reply packet.</li> <li><code>reply_icmp_code</code> is an 8-bit integer representing the ICMP code of the reply packet.</li> <li><code>reply_ttl</code> is an 8-bit integer representing the TTL of the reply packet.</li> <li><code>reply_size</code> is a 16-bit integer representing the size of the reply packet</li> <li><code>reply_mpls_labels</code> is an array of (label, exp, bottom-of-stack, ttl) tuples representing the MPLS labels contained in the ICMP reply.</li> <li><code>rtt</code> is a 16-bit integer representing the estimated round-trip time in tenth of milliseconds.</li> <li><code>round</code> is an arbitrary string set with <code>--meta-round</code> (default <code>1</code>).</li> </ul>"},{"location":"usage/#integration-with-standard-tools","title":"Integration with standard tools","text":"<p>It is easy to integrate caracal with standard UNIX tools by taking advantage of the standard input/output. For example, to store the replies in a SQLite database: <pre><code>echo \"8.8.8.8,24000,33434,64,icmp\" | caracal | sqlite3 caracal.db \".import --csv /dev/stdin replies\"\nsqlite3 -header caracal.db \"SELECT * FROM replies\"\n# capture_timestamp|probe_protocol|probe_src_addr|probe_dst_addr|probe_src_port|probe_dst_port|probe_ttl|quoted_ttl|reply_src_addr|reply_protocol|reply_icmp_type|reply_icmp_code|reply_ttl|reply_size|reply_mpls_labels|rtt|round\n# 1638618261|1|::ffff:10.17.0.137|::|24000|0|64|0|::ffff:8.8.8.8|1|0|0|107|94|[]|564|1\n</code></pre></p>"},{"location":"usage/#checksum","title":"Checksum","text":"<p>Caracal encodes the following checksum in the ID field of the IP header: <pre><code>ip_checksum(caracal_id, dst_addr, src_port, ttl)\n</code></pre> This allows caracal to check that the reply it gets corresponds (excluding checksum collisions) to valid probes.</p> <p>By default, replies for which the checksum in the ID field is invalid are dropped, this can be overridden with the <code>--no-integrity-check</code> flag. Furthermore, the <code>caracal_id</code> value can be changed with the <code>--caracal-id</code> option.</p> <p>Invalid replies are never dropped from the PCAP file (<code>--output-file-pcap</code>), which can be useful for debugging.</p>"}]}